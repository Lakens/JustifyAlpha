n2 <- 50
t <- 0.87
alpha_level <- 0.05
loops <- seq(from = 0, to = 3, by = 0.001)
p <- numeric(length(loops))
bf <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
}
plot(p, bf)
plot(log(p), bf)
plot(p, bf)
plot(p, bf,
v = 3)
plot(p, bf,
abline(v = seq(0,1,0.1), h = seq(0,ymax,5), col = "lightgray", lty = 1)
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = seq(0,10,5), col = "lightgray", lty = 1)
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = seq(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1)
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1)
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
log='x'
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
log='x', log='y'
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
log='xy'
)
bf = 10
n1 <- 50
n2 <- 50
t <- 0.87
alpha_level <- 0.05
loops <- seq(from = 0, to = 3, by = 0.001)
p <- numeric(length(loops))
bf <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
}
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
log='xy'
)
bf
n1 <- 50
n2 <- 50
t <- 0.87
alpha_level <- 0.05
loops <- seq(from = 0, to = 3, by = 0.01)
p <- numeric(length(loops))
bf <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
}
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
log='xy'
)
bf
which.min(abs(bf-10))
which.min(abs(bf-3))
p[which.min(abs(bf-3))]
p[which.min(abs(bf-1/3))]
p[which.min(abs(bf-1))]
p[which.min(abs(bf-3))]
p[which.min(abs(bf-1/10))]
p[which.min(abs(bf-1/3))]
p[which.min(abs(bf-1))]
p[which.min(abs(bf-3))]
p[which.min(abs(bf-10))]
n1 <- 25
n2 <- 25
t <- 0.87
alpha_level <- 0.05
loops <- seq(from = 0, to = 3, by = 0.01)
p <- numeric(length(loops))
bf <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
}
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
log='xy'
)
p[which.min(abs(bf-1/10))]
p[which.min(abs(bf-1/3))]
p[which.min(abs(bf-1))]
p[which.min(abs(bf-3))]
p[which.min(abs(bf-10))]
n1 <- 250
n2 <- 250
loops <- seq(from = 0, to = 3, by = 0.01)
p <- numeric(length(loops))
bf <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
}
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
log='xy'
)
p[which.min(abs(bf-1/10))]
p[which.min(abs(bf-1/3))]
p[which.min(abs(bf-1))]
p[which.min(abs(bf-3))]
p[which.min(abs(bf-10))]
n1 <- 250
n2 <- 250
loops <- seq(from = 0, to = 3, by = 0.01)
p <- numeric(length(loops))
bf <- numeric(length(loops))
d <- numeric(length(loops))
tval <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
tval[i] <- t
d[i] <- t * sqrt((1/n1)+(1/n2))
}
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
log='xy'
)
p[which.min(abs(bf-1/10))]
p[which.min(abs(bf-1/3))]
p[which.min(abs(bf-1))]
p[which.min(abs(bf-3))]
p[which.min(abs(bf-10))]
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
)
plot(d, bf)
n1 <- 25
n2 <- 25
loops <- seq(from = 0, to = 3, by = 0.01)
p <- numeric(length(loops))
bf <- numeric(length(loops))
d <- numeric(length(loops))
tval <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
tval[i] <- t
d[i] <- t * sqrt((1/n1)+(1/n2))
}
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
)
plot(d, bf)
n1 <- 50
n2 <- 50
loops <- seq(from = 0, to = 3, by = 0.01)
p <- numeric(length(loops))
bf <- numeric(length(loops))
d <- numeric(length(loops))
tval <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
tval[i] <- t
d[i] <- t * sqrt((1/n1)+(1/n2))
}
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
)
plot(d, bf)
p[which.min(abs(bf-1/10))]
p[which.min(abs(bf-1/3))]
p[which.min(abs(bf-1))]
p[which.min(abs(bf-3))]
p[which.min(abs(bf-10))]
d[which.min(abs(bf-1/10))]
d[which.min(abs(bf-1/3))]
d[which.min(abs(bf-1))]
d[which.min(abs(bf-3))]
d[which.min(abs(bf-10))]
n1 <- 100
n2 <- 100
loops <- seq(from = 0, to = 3, by = 0.01)
p <- numeric(length(loops))
bf <- numeric(length(loops))
d <- numeric(length(loops))
tval <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
tval[i] <- t
d[i] <- t * sqrt((1/n1)+(1/n2))
}
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
)
plot(d, bf)
plot(p, bf, type = 'l',
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
)
plot(p, bf, type = 'l', lty = 1, lwd = 3,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
)
plot(d, bf, type = 'l', lty = 1, lwd = 3,)
plot(p, bf, type = 'l', lty = 1, lwd = 3,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
)
plot(p, bf, type = 'l', lty = 1, lwd = 3,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 2)
)
plot(d, bf, type = 'l', lty = 1, lwd = 3)
plot(p, bf, type = 'l', lty = 1, lwd = 3,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 2)
)
plot(p, bf, type = 'l', lty = 1, lwd = 3,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1)
)
plot(p, bf, type = 'l', lwd = 3,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1)
)
plot(p, bf, type = 'l', lwd = 3
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "lightgray", lty = 1),
type = 'l', lwd = 3
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1),
type = 'l', lwd = 3
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1),
type = 'l', lwd = 3
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1))
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1),
type = "l", lwd = 3
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1),
lwd = 3
)
plot(p, bf,
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1),
lwd = 3, type = "l"
)
plot(p, bf, type="l", lty=1, lwd=2)
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1)
plot(d, bf, type = 'l', lty = 1, lwd = 3)
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1)
plot(d, bf, type = 'l', lty = 1, lwd = 3, log = "y")
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1)
plot(p, bf, type="l", lty=1, lwd=2, log = "y")
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1)
p[which.min(abs(bf-1/10))]
p[which.min(abs(bf-1/3))]
p[which.min(abs(bf-1))]
p[which.min(abs(bf-3))]
p[which.min(abs(bf-10))]
p[which.min(abs(bf-1/3))]
p[which.min(abs(bf-1))]
p[which.min(abs(bf-3))]
p[which.min(abs(bf-10))]
ttestEvidence("lindley", 100, 100)
library(justifieR)
library(pwr)
library(ggplot2)
ttestEvidence("lindley", 100, 100)
n1 <- 100
n2 <- 100
loops <- seq(from = 0, to = 3, by = 0.001)
p <- numeric(length(loops))
bf <- numeric(length(loops))
d <- numeric(length(loops))
tval <- numeric(length(loops))
i <- 0
for(t in loops){
i <- i+1
bf[i] <- exp(BayesFactor::ttest.tstat(t, n1, n2)$bf)
p[i] <- 2*pt(t, ((n1 + n2) - 2), lower=FALSE)
tval[i] <- t
d[i] <- t * sqrt((1/n1)+(1/n2))
}
plot(p, bf, type="l", lty=1, lwd=2, log = "y")
abline(v = seq(0,1,0.1), h = c(0, 1/10, 1/3, 1, 3, 10), col = "gray", lty = 1)
p[which.min(abs(bf-1))]
res6 <- ttestEvidence("lindley", 100, 100)
will p
res8 <- ttestEvidence("lindley", 100, 100)
res8
res8 <- ttestEvidence("lindley", 100, 100)
res8
ttestEvidence
res9 <- ttestEvidence("lindley", 100, 100, Cauchy = FALSE)
res9
devtools::build_vignettes()
devtools::build_vignettes()
f = function(x, power_function, costT1T2 = 1, priorH1H0 = 1, error = "minimal") {
y <- 1 - eval(parse(text=paste(power_function)))
if(verbose == TRUE){
print(c(x, y, x+y)) #optional: print alpha, beta, and objective
}
if(error == "balance"){
max((costT1T2 * x - priorH1H0 * y)/(priorH1H0 + costT1T2), (priorH1H0 * y - costT1T2 * x)/(priorH1H0 + costT1T2))
} else if (error == "minimal"){
(costT1T2 * x + priorH1H0 * y)/(priorH1H0 + costT1T2)
}
}
priorH1H0 <- 1
costT1T2 <- 4
power_function = "pwr::pwr.t.test(d = 0.5, n = 50, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power"
priorH1H0 <- 1
costT1T2 <- 4
power_function = "pwr::pwr.t.test(d = 0.5, n = 50, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power"
error == "minimal"
verbose = TRUE
res <- stats::optimize(f,
c(0, 1),
tol = 0.001,
power_function = power_function,
costT1T2 = costT1T2,
priorH1H0 = priorH1H0,
error = error)
res <- stats::optimize(f,
c(0, 1),
tol = 0.001,
power_function = power_function,
costT1T2 = costT1T2,
priorH1H0 = priorH1H0,
error = error)
error
res <- stats::optimize(f,
c(0, 1),
tol = 0.001,
power_function = power_function,
costT1T2 = costT1T2,
priorH1H0 = priorH1H0,
error = "minimal")
res <- stats::optimize(f,
c(0, 1),
tol = 0.001,
power_function = power_function,
costT1T2 = 4,
priorH1H0 = 1,
error = "minimal")
costT1T2
(4 * 0.0386784 + 1 * 0.3427041)/(1 + 4)
max((costT1T2 * x - priorH1H0 * y)/(priorH1H0 + costT1T2), (priorH1H0 * y - costT1T2 * x)/(priorH1H0 + costT1T2))
x <- 0.0386784
y <- 0.3427041
max((costT1T2 * x - priorH1H0 * y)/(priorH1H0 + costT1T2), (priorH1H0 * y - costT1T2 * x)/(priorH1H0 + costT1T2))
install.packages(c("corrplot", "devtools", "gtools", "lessR", "matrixcalc", "metafor", "mvtnorm", "quantreg", "remotes", "robustbase", "stringi", "tinytex", "xfun"))
library(JustifyAlpha)
library(pwr)
library(ggplot2)
res6 <- optimal_sample(power_function = "pwr.t.test(d=0.5, n = sample_n, sig.level = x, type='two.sample', alternative='two.sided')$power",
error = "minimize",
errorgoal = 0.05,
costT1T2 = 1,
priorH1H0 = 1)
res6
design_result <- Superpower::ANOVA_design(
design = "2b",
n = 64,
mu = c(0, 0.5),
sd = 1
)
Superpower::ANOVA_exact(design_result, alpha_level = 0.05, verbose = FALSE)$main_results$power/100
Superpower::power_oneway_between(design_result, alpha_level = 0.05)$power/100
pwr.t.test(d=0.5, n=64, sig.level = 0.05, type='two.sample', alternative='two.sided')$power
res7 <- JustifyAlpha::optimal_alpha(power_function = "Superpower::power_oneway_between(design_result, alpha_level = x)$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
res7$alpha
res7$beta
res7$errorrate
res7 <- JustifyAlpha::optimal_alpha(power_function = "Superpower::ANOVA_exact(design_result, alpha_level = 0.05, verbose = FALSE)$main_results$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
res7
res7 <- JustifyAlpha::optimal_alpha(power_function = "Superpower::power_oneway_between(design_result, alpha_level = x)$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
res7 <- JustifyAlpha::optimal_alpha(power_function = "Superpower::ANOVA_exact(design_result, alpha_level = x, verbose = FALSE)$main_results$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
res7
res7 <- JustifyAlpha::optimal_alpha(power_function = "Superpower::power_oneway_between(design_result, alpha_level = x)$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
res7$alpha
res7$beta
res7$errorrate
res7$plot
res8 <- JustifyAlpha::optimal_alpha(power_function = "Superpower::ANOVA_exact(design_result, alpha_level = x, verbose = FALSE)$main_results$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
res8$alpha
res8$beta
res8$errorrate
res8$plot
res7$plot
res7$alpha
res7$beta
res7$errorrate
res7$plot
res8$alpha
res8$beta
res8$errorrate
res8$plot
res8 <- JustifyAlpha::optimal_alpha(power_function = "Superpower::ANOVA_exact( (Superpower::ANOVA_design(design = '2b', n = 64, mu = c(0, 0.5), sd = 1)), alpha_level = x, verbose = FALSE)$main_results$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
Superpower::ANOVA_design(design = '2b', n = 64, mu = c(0, 0.5), sd = 1, plot = FALSE)
Superpower::ANOVA_design(design = '2b', n = 64, mu = c(0, 0.5), sd = 1, plot = FALSE, verbose = FALSE)
res8 <- JustifyAlpha::optimal_alpha(power_function = "Superpower::ANOVA_exact( (Superpower::ANOVA_design(design = '2b', n = 64, mu = c(0, 0.5), sd = 1, plot = FALSE)), alpha_level = x, verbose = FALSE)$main_results$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
res8$alpha
res8$beta
res8$errorrate
res8$plot
res8x <- JustifyAlpha::optimal_alpha(power_function = "Superpower::ANOVA_exact( (Superpower::ANOVA_design(design = '2b', n = 64, mu = c(0, 0.5), sd = 1, plot = FALSE)), alpha_level = x, verbose = FALSE)$main_results$power/100",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1)
res8x$alpha
res8x$beta
res8x$errorrate
res8x$plot
library(shiny); runApp('inst/shiny-examples/shiny.R')
runApp('inst/shiny-examples/shiny.R')
runApp('inst/shiny-examples/shiny.R')
runApp('inst/shiny-examples/shiny.R')
runApp('inst/shiny-examples/shiny.R')
# Install release version from CRAN
install.packages("pkgdown")
# Install development version from GitHub
devtools::install_github("r-lib/pkgdown")
# Run to build the website
pkgdown::build_site()
.Last.error.trace
runApp('inst/shiny-examples/shiny.R')
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
remove.packages("pkgdown", lib="~/R/win-library/4.0")
install.packages("pkgdown")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
library(devtools)
build()
library(JustifyAlpha)
devtools::install_github("Lakens/JustifyAlpha")
devtools::install_github("Lakens/JustifyAlpha")
library(JustifyAlpha)
res6 <- optimal_sample(power_function = "pwr.t.test(d=0.5, n = sample_n, sig.level = x, type='two.sample', alternative='two.sided')$power",
error = "minimize",
errorgoal = 0.05,
costT1T2 = 1,
priorH1H0 = 1)
library(pwr)
library(ggplot2)
res6 <- optimal_sample(power_function = "pwr.t.test(d=0.5, n = sample_n, sig.level = x, type='two.sample', alternative='two.sided')$power",
error = "minimize",
errorgoal = 0.05,
costT1T2 = 1,
priorH1H0 = 1)
res6
library(shiny); runApp('inst/shiny-examples/shiny.R')
