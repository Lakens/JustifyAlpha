library(BayesFactor)
shiny::runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
shiny::runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/inst/shiny-examples/shiny.R')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/inst/shiny-examples/shiny.R')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/inst/shiny-examples/shiny.R')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/inst/shiny-examples/shiny.R')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/inst/shiny-examples/shiny.R')
shiny::runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp()
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp()
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp()
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp()
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp()
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp()
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp()
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
IP()
library(rstanarm)
install.packages(rstanarm)
install.packages("rstanarm")
install.packages("rstanarm")
install.packages("rstanarm")
library(rstan)
HEVSD <- "
// Hierarchical Signal Detection Theory
data {
int<lower=1> k;
int<lower=0> h[k];
int<lower=0> f[k];
int<lower=0> s;
int<lower=0> n;
}
parameters {
vector[k] d;
vector[k] c;
real muc;
real mud;
real<lower=0> lambdac;
real<lower=0> lambdad;
}
transformed parameters {
real<lower=0,upper=1> thetah[k];
real<lower=0,upper=1> thetaf[k];
real<lower=0> sigmac;
real<lower=0> sigmad;
sigmac = inv_sqrt(lambdac);
sigmad = inv_sqrt(lambdad);
// Reparameterization Using Equal-Variance Gaussian SDT
for(i in 1:k) {
thetah[i] = Phi(d[i] / 2 - c[i]);
thetaf[i] = Phi(-d[i] / 2 - c[i]);
}
}
model {
// Priors
muc ~ normal(0, inv_sqrt(.001));
mud ~ normal(0, inv_sqrt(.001));
lambdac ~ gamma(.001, .001);
lambdad ~ gamma(.001, .001);
// Discriminability and Bias
c ~ normal(muc, sigmac);
d ~ normal(mud, sigmad);
// Observed counts
h ~ binomial(s, thetah);
f ~ binomial(n, thetaf);
}"
HUSVD <-'
data {
int <lower=1> n;
int <lower=0> HR[n];
int <lower=0> FA[n];
int <lower=0> Si[n];
int <lower=0> No[n];
}
parameters {
vector[n] d;
vector[n] c;
real muc;
real mud;
real<lower=0> lambda;
real<lower=0> sigvar;
}
transformed parameters {
real<lower=0,upper=1> h[n];
real<lower=0,upper=1> f[n];
real<lower=0> sigmas;
real<lower=0> sigmac;
real<lower=0> sigmad;
real sigman;
sigman=1.0;
sigmas=sqrt(sigvar);
sigmac = sigman* inv_sqrt(lambda);
sigmad = sigmas* inv_sqrt(lambda);
// Reparameterization
for(i in 1:n) {
h[i] = Phi((0.5*d[i] - c[i])/sigmas);
f[i] = Phi((-0.5*d[i]  - c[i])/sigman);
}
}
model {
// Priors
lambda ~ gamma (0.5,0.5);
mud ~ normal (0,100);
muc ~ normal (0,100);
sigvar ~ normal (1,2) T[0, ];
// Discriminability and Bias
c ~ normal(muc, sigmac);
d ~ normal(mud, sigmad);
// Observed counts
HR ~ binomial(Si, h);
FA ~ binomial(No, f);
}
generated quantities {
vector[n] log_lik;
for (i in 1:n) {
log_lik[i] = binomial_lpmf(HR[i]|Si[i],h);
log_lik[i] = binomial_lpmf(FA[i]|No[i],f);
}
}
'
stanmodelH0 <- stan_model(model_code = HEVSD, model_name="stanmodel")
install.packages("Rtool")
install.packages("Rtools")
# clears workspace:
rm(list=ls())
library(rstan)
HEVSD <- "
// Hierarchical Signal Detection Theory
data {
int<lower=1> k;
int<lower=0> h[k];
int<lower=0> f[k];
int<lower=0> s;
int<lower=0> n;
}
parameters {
vector[k] d;
vector[k] c;
real muc;
real mud;
real<lower=0> lambdac;
real<lower=0> lambdad;
}
transformed parameters {
real<lower=0,upper=1> thetah[k];
real<lower=0,upper=1> thetaf[k];
real<lower=0> sigmac;
real<lower=0> sigmad;
sigmac = inv_sqrt(lambdac);
sigmad = inv_sqrt(lambdad);
// Reparameterization Using Equal-Variance Gaussian SDT
for(i in 1:k) {
thetah[i] = Phi(d[i] / 2 - c[i]);
thetaf[i] = Phi(-d[i] / 2 - c[i]);
}
}
model {
// Priors
muc ~ normal(0, inv_sqrt(.001));
mud ~ normal(0, inv_sqrt(.001));
lambdac ~ gamma(.001, .001);
lambdad ~ gamma(.001, .001);
// Discriminability and Bias
c ~ normal(muc, sigmac);
d ~ normal(mud, sigmad);
// Observed counts
h ~ binomial(s, thetah);
f ~ binomial(n, thetaf);
}"
HUSVD <-'
data {
int <lower=1> n;
int <lower=0> HR[n];
int <lower=0> FA[n];
int <lower=0> Si[n];
int <lower=0> No[n];
}
parameters {
vector[n] d;
vector[n] c;
real muc;
real mud;
real<lower=0> lambda;
real<lower=0> sigvar;
}
transformed parameters {
real<lower=0,upper=1> h[n];
real<lower=0,upper=1> f[n];
real<lower=0> sigmas;
real<lower=0> sigmac;
real<lower=0> sigmad;
real sigman;
sigman=1.0;
sigmas=sqrt(sigvar);
sigmac = sigman* inv_sqrt(lambda);
sigmad = sigmas* inv_sqrt(lambda);
// Reparameterization
for(i in 1:n) {
h[i] = Phi((0.5*d[i] - c[i])/sigmas);
f[i] = Phi((-0.5*d[i]  - c[i])/sigman);
}
}
model {
// Priors
lambda ~ gamma (0.5,0.5);
mud ~ normal (0,100);
muc ~ normal (0,100);
sigvar ~ normal (1,2) T[0, ];
// Discriminability and Bias
c ~ normal(muc, sigmac);
d ~ normal(mud, sigmad);
// Observed counts
HR ~ binomial(Si, h);
FA ~ binomial(No, f);
}
generated quantities {
vector[n] log_lik;
for (i in 1:n) {
log_lik[i] = binomial_lpmf(HR[i]|Si[i],h);
log_lik[i] = binomial_lpmf(FA[i]|No[i],f);
}
}
'
stanmodelH0 <- stan_model(model_code = HEVSD, model_name="stanmodel")
stanmodelH1 <- stan_model(model_code = HUSVD, model_name="stanmodel")
remove.packages("rstan", lib="~/R/win-library/4.0")
install.packges("rstan")
install.packages("rstan")
install.packages("rstan")
install.packages("rstan")
# clears workspace:
rm(list=ls())
library(rstan)
HEVSD <- "
// Hierarchical Signal Detection Theory
data {
int<lower=1> k;
int<lower=0> h[k];
int<lower=0> f[k];
int<lower=0> s;
int<lower=0> n;
}
parameters {
vector[k] d;
vector[k] c;
real muc;
real mud;
real<lower=0> lambdac;
real<lower=0> lambdad;
}
transformed parameters {
real<lower=0,upper=1> thetah[k];
real<lower=0,upper=1> thetaf[k];
real<lower=0> sigmac;
real<lower=0> sigmad;
sigmac = inv_sqrt(lambdac);
sigmad = inv_sqrt(lambdad);
// Reparameterization Using Equal-Variance Gaussian SDT
for(i in 1:k) {
thetah[i] = Phi(d[i] / 2 - c[i]);
thetaf[i] = Phi(-d[i] / 2 - c[i]);
}
}
model {
// Priors
muc ~ normal(0, inv_sqrt(.001));
mud ~ normal(0, inv_sqrt(.001));
lambdac ~ gamma(.001, .001);
lambdad ~ gamma(.001, .001);
// Discriminability and Bias
c ~ normal(muc, sigmac);
d ~ normal(mud, sigmad);
// Observed counts
h ~ binomial(s, thetah);
f ~ binomial(n, thetaf);
}"
HUSVD <-'
data {
int <lower=1> n;
int <lower=0> HR[n];
int <lower=0> FA[n];
int <lower=0> Si[n];
int <lower=0> No[n];
}
parameters {
vector[n] d;
vector[n] c;
real muc;
real mud;
real<lower=0> lambda;
real<lower=0> sigvar;
}
transformed parameters {
real<lower=0,upper=1> h[n];
real<lower=0,upper=1> f[n];
real<lower=0> sigmas;
real<lower=0> sigmac;
real<lower=0> sigmad;
real sigman;
sigman=1.0;
sigmas=sqrt(sigvar);
sigmac = sigman* inv_sqrt(lambda);
sigmad = sigmas* inv_sqrt(lambda);
// Reparameterization
for(i in 1:n) {
h[i] = Phi((0.5*d[i] - c[i])/sigmas);
f[i] = Phi((-0.5*d[i]  - c[i])/sigman);
}
}
model {
// Priors
lambda ~ gamma (0.5,0.5);
mud ~ normal (0,100);
muc ~ normal (0,100);
sigvar ~ normal (1,2) T[0, ];
// Discriminability and Bias
c ~ normal(muc, sigmac);
d ~ normal(mud, sigmad);
// Observed counts
HR ~ binomial(Si, h);
FA ~ binomial(No, f);
}
generated quantities {
vector[n] log_lik;
for (i in 1:n) {
log_lik[i] = binomial_lpmf(HR[i]|Si[i],h);
log_lik[i] = binomial_lpmf(FA[i]|No[i],f);
}
}
'
stanmodelH0 <- stan_model(model_code = HEVSD)
Sys.getenv("PATH")
devtools::install_version("rstan", version = "2.21.1", repos = "http://cran.us.r-project.org")
shiny::runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
runApp('C:/Users/Maximilian Maier/Desktop/MasterThesis/Experiment')
?decov
library(rstanarm)
?decov
help("priors", package = "rstanarm")
?decov
prob <- seq(0,1, 0.001)
prob <- seq(0,1, 0.001)
probs <- beta(1+ 5*prob, 1 + 5*(1-prob))
beta
prob <- seq(0,1, 0.001)
probs <- (1+ 5*prob/1 + 5*(1-prob))
plot(prob, probs)
prob <- seq(0,1, 0.001)
probs <- (1+ 5*prob)/(1 + 5*(1-prob))
plot(prob, probs)
prob <- seq(0,1, 0.001)
probs <- (1+ 5*prob)/((1 + 5*(1-prob)) + (1+ 5*prob))
plot(prob, probs)
prob <- seq(0,1, 0.001)
probs <- (1+ 5*prob)/((1 + 5*(1-prob)) + ( 1 + 5*prob))
plot(prob, probs)
prob <- seq(0,1, 0.001)
probs <- (1+ prob)/((1 + (1-prob)) + (1 + prob))
plot(prob, probs)
mean(rbeta(10000, 2, 3))
prob <- seq(0,1, 0.001)
probs <- (1+ prob*10)/((1 + 10*(1-prob)) + (1 + 10*prob))
plot(prob, probs)
prob <- seq(0,1, 0.01)
prob <- seq(0,1, 0.01)
probs <- (1 + prob*1/prob)/((1 + 1/prob*(1-prob)) + (1 + 1/prob*prob))
plot(prob, probs)
prob1 <- seq(0, 0.5, 0.01)
prob2 <- seq(0.5, 1, 0.01)
probs1 <- (1 + prob*1/prob)/((1 + 1/prob*(1-prob)) + (1 + 1/prob*prob))
probs2 <- (1 + prob*1/(1-prob)/((1 + 1/(1-prob)*(1-prob)) + (1 + 1/(1-prob)*prob))
plot(prob, probs)
prob1 <- seq(0, 0.5, 0.01)
prob2 <- seq(0.5, 1, 0.01)
probs1 <- (1 + prob*1/prob)/((1 + 1/prob*(1-prob)) + (1 + 1/prob*prob))
probs2 <- (1 + prob*1/(1-prob)/((1 + 1/(1-prob)*(1-prob)) + (1 + 1/(1-prob)*prob))
plot(c(prob1, prob2), c(probs1, probs2))
probs2 <- (1 + prob*1/(1-prob)/((1 + 1/(1-prob)*(1-prob)) + (1 + 1/(1-prob)*prob))
prob1 <- seq(0, 0.5, 0.01)
prob2 <- seq(0.5, 1, 0.01)
probs1 <- (1 + prob*1/prob)/((1 + 1/prob*(1-prob)) + (1 + 1/prob*prob))
probs2 <- (1 + prob*1/(1-prob))/((1 + 1/(1-prob)*(1-prob)) + (1 + 1/(1-prob)*prob))
plot(c(prob1, prob2), c(probs1, probs2))
prob1 <- seq(0, 0.5, 0.01)
prob2 <- seq(0.5, 1, 0.01)
probs1 <- (1 + prob1*1/prob1)/((1 + 1/prob1*(1-prob1)) + (1 + 1/prob1*prob1))
probs2 <- (1 + prob2*1/(1-prob2))/((1 + 1/(1-prob2)*(1-prob2)) + (1 + 1/(1-prob2)*prob2))
plot(c(prob1, prob2), c(probs1, probs2))
plot(c(prob1, prob2), c(probs1, probs2), type = "l")
plot(c(prob1, prob2), c(probs1, probs2), type = "l", lwd = 3, xlab = "Objective Probability", ylab = "Subjective Probability")
library(shiny); runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/inst/shiny-examples/shiny.R')
#' Launch the Justify your alpha shiny app.
#' @export
runApp <- function() {
appDir <- system.file("shiny-examples", "shiny.R", package = "justifieR")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `justifieR`.", call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
runApp()
n1 <- c(seq(10, 50, 10))
power_function <- "pwr::pwr.t.test(d = 0.5, n = 50, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power"
for (k in c(1,3,10)){
for (i in n1){
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "n = i", paste("n =", i))))
(1-res$beta) == pwr::pwr.t.test(d = 0.5, n = 50, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power
}
for (odds in c(1, 5, 10)){
for(cost in c(1, 3, 10)){
for (i in n1){
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "n = i", paste("n =", i))), priorH1H0 = odds, costT1T2 = cost)
expect_true(res$errorrate == (cost * res$alpha + odds * res$beta) / (odds+ cost))
}
}
}
}
n1 <- c(seq(10, 50, 10))
power_function <- "pwr::pwr.t.test(d = 0.5, n = 50, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power"
for (k in c(1,3,10)){
for (i in n1){
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "n = i", paste("n =", i))))
(1-res$beta) == pwr::pwr.t.test(d = 0.5, n = 50, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power
}
for (odds in c(1, 5, 10)){
for(cost in c(1, 3, 10)){
for (i in n1){
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "n = i", paste("n =", i))), priorH1H0 = odds, costT1T2 = cost)
(1-res$beta) == pwr::pwr.t.test(d = 0.5, n = 50, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power
}
}
}
}
n1 <- c(seq(10, 50, 10))
power_function <- "pwr::pwr.t.test(d = 0.5, n = 50, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power"
for (k in c(1,3,10)){
for (i in n1){
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "n = i", paste("n =", i))))
print((1-res$beta) == pwr::pwr.t.test(d = 0.5, n = 50, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power)
}
for (odds in c(1, 5, 10)){
for(cost in c(1, 3, 10)){
for (i in n1){
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "n = i", paste("n =", i))), priorH1H0 = odds, costT1T2 = cost)
print((1-res$beta) == pwr::pwr.t.test(d = 0.5, n = 50, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power)
}
}
}
}
?optimal_alpha
##only one test otherwise too slow
test_that("Alpha_Sample works correctly",{
res <- optimal_sample("pwr::pwr.t.test(d = 0.5, n = 50, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", costT1T2 = 3, priorH1H0 = 3)
print((1-res$beta) == pwr::pwr.t.test(d = 0.5, n = res$samplesize, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power)
})
res <- optimal_sample("pwr::pwr.t.test(d = 0.5, n = 50, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", costT1T2 = 3, priorH1H0 = 3)
print((1-res$beta) == pwr::pwr.t.test(d = 0.5, n = res$samplesize, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power)
res$alpha
res$beta
res$samplesize
pwr::pwr.t.test(d = 0.5, n = res$samplesize, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power)
pwr::pwr.t.test(d = 0.5, n = res$samplesize, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power
res <- optimal_sample("pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", costT1T2 = 3, priorH1H0 = 3)
print((1-res$beta) == pwr::pwr.t.test(d = 0.5, n = res$samplesize, sig.level = res$alpha, type = 'two.sample', alternative = 'two.sided')$power)
devtools::document()
setwd("C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR")
devtools::document()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
?testthat
install.packages("testthat")
install.packages("rlang", dependencies = c("Depends", "Imports", "LinkingTo", "Suggests"))
setwd("C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR")
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
pt(0.6)
pt(0.6,3)
pt(0.6,3, lower.tail = F)
devtools::check()
test_check("alphaJustifieR")
library(testthat)
test_check("alphaJustifieR")
setwd("C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/tests/testthat")
test_check("alphaJustifieR")
devtools::test()
devtools::check()
devtools::check()
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/inst/shiny-examples/shiny.R')
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/JustifieR/inst/shiny-examples/shiny.R')
runApp()
runApp()
devtools::check()
devtools::test()
