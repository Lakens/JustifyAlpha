priors_bias          = list(
prior_weightfunction(distribution = "two.sided", parameters = list(alpha = c(1, 1),       steps = c(0.05)),             prior_weights = 1/12),
prior_weightfunction(distribution = "two.sided", parameters = list(alpha = c(1, 1, 1),    steps = c(0.05, 0.10)),       prior_weights = 1/12),
prior_weightfunction(distribution = "one.sided", parameters = list(alpha = c(1, 1),       steps = c(0.05)),             prior_weights = 1/12),
prior_weightfunction(distribution = "one.sided", parameters = list(alpha = c(1, 1, 1),    steps = c(0.025, 0.05)),      prior_weights = 1/12),
prior_weightfunction(distribution = "one.sided", parameters = list(alpha = c(1, 1, 1),    steps = c(0.05, 0.5)),        prior_weights = 1/12),
prior_weightfunction(distribution = "one.sided", parameters = list(alpha = c(1, 1, 1, 1), steps = c(0.025, 0.05, 0.5)), prior_weights = 1/12),
prior_PET(distribution = "Cauchy", parameters = list(0,1), truncation = list(0, Inf),              prior_weights = 1/4),
prior_PEESE(distribution = "Cauchy", parameters = list(0,5), truncation = list(0, Inf),            prior_weights = 1/4)
),
priors_effect_null          = list(prior(distribution = "point", parameters = list(location = 0))),
priors_heterogeneity_null   = list(prior(distribution = "point", parameters = list(location = 0))),
priors_bias_null            = prior_none(),
parallel = T, chains = 1, sample = 200, burnin = 100, adapt = 100,
)
library(JustifyAlpha)
ttestEvidence(3, 1000, 1000)
ttestEvidence(3, 1000, 1000, printplot = T)
ttestEvidence(1, 1000, 1000, printplot = T)
ttestEvidence(10, 1000, 1000, printplot = T)
library(Superpower)
install.packages("power")
install.packages("PoweR")
shiny::runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/ShinyApp')
install.packages("TOSTER")
runApp('C:/Users/Maximilian Maier/Desktop/PaperWriting/IdealAlpha/ShinyApp')
devtools::install_github("FBartos/RoBTT")
devtools::install_github("FBartos/RoBTT")
library(RoBTT)
rstan::stan_demo(1)
rstan::stan_demo(1)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.getenv("BINPREF")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
Sys.getenv("PATH")
Sys.getenv("BINPREF")
readLines("~/.R/Makevars.win")
readLines("~/.Renviron")
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages(#)
install.packages('BH')
example(stan_model, package = "rstan", run.dontrun = TRUE)
Sys.getenv("PATH")
Sys.getenv("BINPREF")
readLines("~/.R/Makevars.win")
readLines("~/.Renviron")
Sys.getenv("BINPREF")
file.path(Sys.getenv("HOME"), ".Rprofile")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("BH")
example(stan_model, package = "rstan", run.dontrun = TRUE)
devtools::install_github("FBartos/RoBTT")
install.packages("papaja")
devtools::install_github("crsh/papaja")
remove.packages("xfun", lib="~/R/win-library/4.1")
devtools::install_github("crsh/papaja")
optimal_alpha <- function(power_function, costT1T2 = 1, priorH1H0 = 1, error = "minimize", verbose = FALSE, printplot = FALSE) {
#Define the function to be minimized
f = function(x, power_function, costT1T2 = 1, priorH1H0 = 1, error = "minimize") {
y <- 1 - eval(parse(text=paste(power_function)))
if(verbose == TRUE){
print(c(x, y, x+y)) #optional: print alpha, beta, and objective
}
if(error == "balance"){
max((costT1T2 * x - priorH1H0 * y)/(priorH1H0 + costT1T2), (priorH1H0 * y - costT1T2 * x)/(priorH1H0 + costT1T2))
} else if (error == "minimize"){
(costT1T2 * x + priorH1H0 * y)/(priorH1H0 + costT1T2)
}
}
#Run optimize to find the minimum
res <- stats::optimize(f,
c(0, 1),
tol = 0.001,
power_function = power_function,
costT1T2 = costT1T2,
priorH1H0 = priorH1H0,
error = error)
if(error == "balance"){
beta <- res$minimum - res$objective
} else if (error == "minimize"){
beta <- res$objective - res$minimum
}
#Add plot
alpha_level <- 0
alpha_list <- numeric(9999)
beta_list <- numeric(9999)
w_list <- numeric(9999)
w_c_list <- numeric(9999)
for(i in 1:9999) {
alpha_level <- alpha_level + 0.0001
alpha_list[i] <- alpha_level
x <- alpha_level
beta_list[i] <- 1 - eval(parse(text=paste(power_function)))
w_list[i] <- (alpha_level + beta_list[i]) / 2
w_c_list[i] <- (costT1T2 * alpha_level + priorH1H0 * beta_list[i]) / (costT1T2 + priorH1H0)
}
x <- res$minimum
# Create dataframe for plotting
plot_data <- data.frame(alpha_list, beta_list, w_list, w_c_list)
w_c_alpha_plot <- ggplot2::ggplot(ggplot2::aes(x=alpha_list, y=w_c_list), data=plot_data,) +
ggplot2::geom_line(size = 1.3) +
ggplot2::geom_point(ggplot2::aes(x = res$minimum, y = (costT1T2 * res$minimum + priorH1H0 * (1 - eval(parse(text=paste(power_function))))) / (priorH1H0 + costT1T2)), color="red", size = 3) +
ggplot2::theme_minimal(base_size = 18) +
ggplot2::scale_x_continuous("alpha", seq(0,1,0.1)) +
ggplot2::scale_y_continuous("weighted combined error rate", seq(0,1,0.1), limits = c(0,1))
#Store results
alpha = res$minimum
beta = 1 - eval(parse(text=paste(power_function)))
if(printplot){
print(w_c_alpha_plot)
}
list(alpha = res$minimum,
beta = 1 - eval(parse(text=paste(power_function))),
errorrate = (costT1T2 * alpha + priorH1H0 * beta) / (costT1T2 + priorH1H0),
objective = res$objective,
plot_data = plot_data,
plot = w_c_alpha_plot)
}
resplot1 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 3, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot2 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 10, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot3 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 30, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
plot_data <- rbind(resplot1$plot_data, resplot2$plot_data, resplot3$plot_data)
plot_data$n <- as.factor(rep(c(3, 10, 30), each = 9999))
w_c_alpha_plot <- ggplot(data=plot_data, aes(x=alpha_list, y=w_c_list)) +
geom_line(size = 1.3, aes(linetype = n)) +
geom_point(aes(x = resplot1$alpha, y = (1 * resplot1$alpha + 1 * (resplot1$beta)) / (1 + 1)), color="red", size = 3) +
geom_point(aes(x = resplot2$alpha, y = (1 * resplot2$alpha + 1 * (resplot2$beta)) / (1 + 1)), color="red", size = 3) +
geom_point(aes(x = resplot3$alpha, y = (1 * resplot3$alpha + 1 * (resplot3$beta)) / (1 + 1)), color="red", size = 3) +
theme_minimal(base_size = 16) +
scale_x_continuous("alpha", seq(0,1,0.1)) +
scale_y_continuous("weighted combined error rate", seq(0,1,0.1), limits = c(0,1))
w_c_alpha_plot
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
#if(!require(JustifyAlpha)){devtools::install_github("Lakens/JustifyAlpha")}
library(JustifyAlpha)
library(pwr)
library(ggplot2)
# Chunk 2: minimize
res1 <- optimal_alpha(power_function = "pwr.t.test(d=0.5, n=64, sig.level = x, type='two.sample', alternative='two.sided')$power",
error = "minimize",
costT1T2 = 1,
priorH1H0 = 1,
verbose = FALSE,
printplot = TRUE)
res1$alpha
res1$beta
res1$errorrate
resplot1 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 3, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot2 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 10, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot3 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 30, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
plot_data <- rbind(resplot1$plot_data, resplot2$plot_data, resplot3$plot_data)
plot_data$n <- as.factor(rep(c(3, 10, 30), each = 9999))
w_c_alpha_plot <- ggplot(data=plot_data, aes(x=alpha_list, y=w_c_list)) +
geom_line(size = 1.3, aes(linetype = n)) +
geom_point(aes(x = resplot1$alpha, y = (1 * resplot1$alpha + 1 * (resplot1$beta)) / (1 + 1)), color="red", size = 3) +
geom_point(aes(x = resplot2$alpha, y = (1 * resplot2$alpha + 1 * (resplot2$beta)) / (1 + 1)), color="red", size = 3) +
geom_point(aes(x = resplot3$alpha, y = (1 * resplot3$alpha + 1 * (resplot3$beta)) / (1 + 1)), color="red", size = 3) +
theme_minimal(base_size = 16) +
scale_x_continuous("alpha", seq(0,1,0.1)) +
scale_y_continuous("weighted combined error rate", seq(0,1,0.1), limits = c(0,1))
w_c_alpha_plot
resplot1 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 3, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot2 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 10, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot3 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 30, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
plot_data <- rbind(resplot1$plot_data, resplot2$plot_data, resplot3$plot_data)
plot_data$n <- as.factor(rep(c(3, 10, 30), each = 9999))
w_c_alpha_plot <- ggplot(data=plot_data, aes(x=alpha_list, y=w_c_list)) +
geom_line(size = 1.3, aes(linetype = n)) +
geom_point(aes(x = resplot1$alpha, y = (1 * resplot1$alpha + 1 * (resplot1$beta)) / (1 + 1)), color="red", size = 3) +
geom_point(aes(x = resplot2$alpha, y = (1 * resplot2$alpha + 1 * (resplot2$beta)) / (1 + 1)), color="red", size = 3) +
geom_point(aes(x = resplot3$alpha, y = (1 * resplot3$alpha + 1 * (resplot3$beta)) / (1 + 1)), color="red", size = 3) +
theme_minimal(base_size = 16) +
scale_x_continuous("alpha", seq(0,1,0.1)) +
scale_y_continuous("weighted combined error rate", seq(0,1,0.1), limits = c(0,1))
w_c_alpha_plot
resplot1 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 3, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot2 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 10, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot3 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 30, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
plot_data <- rbind(resplot1$plot_data, resplot2$plot_data, resplot3$plot_data)
plot_data$n <- as.factor(rep(c(3, 10, 30), each = 9999))
w_c_alpha_plot <- ggplot(data=plot_data, aes(x=alpha_list, y=w_c_list)) +
geom_line(size = 1.3, aes(linetype = n)) +
geom_point(aes(x = resplot1$alpha, y = (1 * resplot1$alpha + 1 * (resplot1$beta)) / (1 + 1)), color="red", size = 3) +
geom_point(aes(x = resplot2$alpha, y = (1 * resplot2$alpha + 1 * (resplot2$beta)) / (1 + 1)), color="red", size = 3) +
geom_point(aes(x = resplot3$alpha, y = (1 * resplot3$alpha + 1 * (resplot3$beta)) / (1 + 1)), color="red", size = 3) +
theme_minimal(base_size = 16) +
scale_x_continuous("alpha", seq(0,1,0.1)) +
scale_y_continuous("weighted combined error rate", seq(0,1,0.1), limits = c(0,1))
w_c_alpha_plot
resplot1 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 3, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot2 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 10, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
resplot3 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 30, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 1, printplot = TRUE)
optimal_sample <- function(power_function, errorgoal = 0.05, costT1T2 = 1, priorH1H0 = 1, error = "minimize", printplot = FALSE) {
samplesize<- optim(20, alpha_sample_solve, lower = 2, upper = 100000, method = "L-BFGS-B",
power_function = power_function, errorgoal = errorgoal, costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)$par
samplesize <- ceiling(samplesize)
result <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "sample_n", as.character(samplesize))), costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)
if(printplot){
alphas <- c()
betas <-c()
Error <-c()
Samplesize<- c()
for (i in seq(10, (round(samplesize, digits = -1) + 20), 5)) {
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "sample_n", as.character(i))), costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)
alphas <- c(alphas, res$alpha)
betas <- c(betas, res$beta)
Error <- c(Error, res$errorrate)
Samplesize <- c(Samplesize, i)
#print(paste("Progress: ", round((i/(samplesize + 20))*100, digits =0), "%", sep = ""))
}
defaultW <- getOption("warn")
options(warn = -1)
line <- rep(0.05, length(Samplesize))
dataplot <- as.data.frame(cbind(alphas, betas, Error, Samplesize, line))
colors <- c("Beta" = "grey", "Weighted Combined Error Rate of 5%" = "red", "Weighted Combined Error Rate" = "black", "Alpha" = "grey")
linetypes <- c("Beta" = "dotted", "Weighted Combined Error Rate of 5%" = "solid", "Weighted Combined Error Rate" = "solid", "Alpha" = "dashed")
plot <- ggplot2::ggplot(ggplot2::aes(x=Samplesize), data=dataplot) +
ggplot2::geom_line(size = 1.3, ggplot2::aes(y = Error, color = "Weighted Combined Error Rate", linetype = "Weighted Combined Error Rate")) +
ggplot2::theme_minimal(base_size = 18) +
ggplot2::scale_x_continuous("Sample Size", seq(10,150,20)) +
ggplot2::scale_y_continuous("",seq(0,1,0.05), limits = c(0,0.5)) +
ggplot2::geom_line(ggplot2::aes(y=alphas,  color = "Alpha", linetype = "Alpha"), data=dataplot, size = 1.3) +
ggplot2::geom_line(ggplot2::aes(y=betas,  color = "Beta", linetype = "Beta"), data=dataplot, size = 1.3) +
ggplot2::geom_point(ggplot2::aes(x = samplesize, y = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0), color = "Weighted Combined Error Rate of 5%", linetype = "Weighted Combined Error Rate of 5%"), size = 3) +
ggplot2::labs(x = "Sample Size",
y = "",
color = "",
linetype = "") +
ggplot2::scale_color_manual(values = colors) +
ggplot2::scale_linetype_manual(values = linetypes) +
ggplot2::theme(legend.position="bottom")
plot <- plot +  ggplot2::geom_segment(ggplot2::aes(x = samplesize, xend = samplesize, y = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0), yend = -Inf), color = "red", linetype = "dotted")
print(plot)
options(warn = defaultW)
}
if(printplot){
list(alpha = result$alpha,
beta = result$beta,
errorrate = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0),
objective = result$objective,
samplesize = samplesize,
plot = plot
)
} else {
list(alpha = result$alpha,
beta = result$beta,
errorrate = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0),
objective = result$objective,
samplesize = samplesize
)
}
}
resplot3 <- optimal_alpha(power_function = "pwr::pwr.t.test(d = 1, n = 30, sig.level = x, type = 'two.sample', alternative = 'two.sided')$power", error = "minimize", costT1T2 = 5, priorH1H0 = 0.1, printplot = TRUE)
devtools::build()
setwd("C:/Github/JustifyAlpha/R")
devtools::build()
?optimal_sample
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power", errorgoal = 0.05, costT1T2 = 5, priorH1H0 = 0.1)
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power", errorgoal = 0.05, costT1T2 = 5)
optimal_sample <- function(power_function, errorgoal = 0.05, costT1T2 = 1, priorH1H0 = 1, error = "minimize", printplot = FALSE) {
samplesize<- optim(20, alpha_sample_solve, lower = 2, upper = 100000, method = "L-BFGS-B",
power_function = power_function, errorgoal = errorgoal, costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)$par
samplesize <- ceiling(samplesize)
result <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "sample_n", as.character(samplesize))), costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)
if(printplot){
alphas <- c()
betas <-c()
Error <-c()
Samplesize<- c()
for (i in seq(10, (round(samplesize, digits = -1) + 20), 5)) {
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "sample_n", as.character(i))), costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)
alphas <- c(alphas, res$alpha)
betas <- c(betas, res$beta)
Error <- c(Error, res$errorrate)
Samplesize <- c(Samplesize, i)
#print(paste("Progress: ", round((i/(samplesize + 20))*100, digits =0), "%", sep = ""))
}
defaultW <- getOption("warn")
options(warn = -1)
line <- rep(0.05, length(Samplesize))
dataplot <- as.data.frame(cbind(alphas, betas, Error, Samplesize, line))
colors <- c("Beta" = "grey", "Weighted Combined Error Rate of 5%" = "red", "Weighted Combined Error Rate" = "black", "Alpha" = "grey")
linetypes <- c("Beta" = "dotted", "Weighted Combined Error Rate of 5%" = "solid", "Weighted Combined Error Rate" = "solid", "Alpha" = "dashed")
plot <- ggplot2::ggplot(ggplot2::aes(x=Samplesize), data=dataplot) +
ggplot2::geom_line(size = 1.3, ggplot2::aes(y = Error, color = "Weighted Combined Error Rate", linetype = "Weighted Combined Error Rate")) +
ggplot2::theme_minimal(base_size = 18) +
ggplot2::scale_x_continuous("Sample Size", seq(10,150,20)) +
ggplot2::scale_y_continuous("",seq(0,1,0.05), limits = c(0,0.5)) +
ggplot2::geom_line(ggplot2::aes(y=alphas,  color = "Alpha", linetype = "Alpha"), data=dataplot, size = 1.3) +
ggplot2::geom_line(ggplot2::aes(y=betas,  color = "Beta", linetype = "Beta"), data=dataplot, size = 1.3) +
ggplot2::geom_point(ggplot2::aes(x = samplesize, y = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0), color = "Weighted Combined Error Rate of 5%", linetype = "Weighted Combined Error Rate of 5%"), size = 3) +
ggplot2::labs(x = "Sample Size",
y = "",
color = "",
linetype = "") +
ggplot2::scale_color_manual(values = colors) +
ggplot2::scale_linetype_manual(values = linetypes) +
ggplot2::theme(legend.position="bottom")
plot <- plot +  ggplot2::geom_segment(ggplot2::aes(x = samplesize, xend = samplesize, y = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0), yend = -Inf), color = "red", linetype = "dotted")
print(plot)
options(warn = defaultW)
}
if(printplot){
list(alpha = result$alpha,
beta = result$beta,
errorrate = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0),
objective = result$objective,
samplesize = samplesize,
plot = plot
)
} else {
list(alpha = result$alpha,
beta = result$beta,
errorrate = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0),
objective = result$objective,
samplesize = samplesize
)
}
}
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power", errorgoal = 0.05, costT1T2 = 5)
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power")
optimal_sample <- function(power_function, errorgoal = 0.05, costT1T2 = 1, priorH1H0 = 1, error = "minimize", printplot = FALSE) {
samplesize<- optim(20, alpha_sample_solve, lower = 2, upper = 100000, method = "L-BFGS-B",
power_function = power_function, errorgoal = errorgoal, costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)$par
samplesize <- ceiling(samplesize)
result <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "sample_n", as.character(samplesize))), costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)
if(printplot){
alphas <- c()
betas <-c()
Error <-c()
Samplesize<- c()
for (i in seq(10, (round(samplesize, digits = -1) + 20), 5)) {
res <- optimal_alpha(power_function = paste(stringr::str_replace(power_function, "sample_n", as.character(i))), costT1T2 = costT1T2, priorH1H0 = priorH1H0, error = error)
alphas <- c(alphas, res$alpha)
betas <- c(betas, res$beta)
Error <- c(Error, res$errorrate)
Samplesize <- c(Samplesize, i)
#print(paste("Progress: ", round((i/(samplesize + 20))*100, digits =0), "%", sep = ""))
}
defaultW <- getOption("warn")
options(warn = -1)
line <- rep(0.05, length(Samplesize))
dataplot <- as.data.frame(cbind(alphas, betas, Error, Samplesize, line))
colors <- c("Beta" = "grey", "Weighted Combined Error Rate of 5%" = "red", "Weighted Combined Error Rate" = "black", "Alpha" = "grey")
linetypes <- c("Beta" = "dotted", "Weighted Combined Error Rate of 5%" = "solid", "Weighted Combined Error Rate" = "solid", "Alpha" = "dashed")
plot <- ggplot2::ggplot(ggplot2::aes(x=Samplesize), data=dataplot) +
ggplot2::geom_line(size = 1.3, ggplot2::aes(y = Error, color = "Weighted Combined Error Rate", linetype = "Weighted Combined Error Rate")) +
ggplot2::theme_minimal(base_size = 18) +
ggplot2::scale_x_continuous("Sample Size", seq(10,150,20)) +
ggplot2::scale_y_continuous("",seq(0,1,0.05), limits = c(0,0.5)) +
ggplot2::geom_line(ggplot2::aes(y=alphas,  color = "Alpha", linetype = "Alpha"), data=dataplot, size = 1.3) +
ggplot2::geom_line(ggplot2::aes(y=betas,  color = "Beta", linetype = "Beta"), data=dataplot, size = 1.3) +
ggplot2::geom_point(ggplot2::aes(x = samplesize, y = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0), color = "Weighted Combined Error Rate of 5%", linetype = "Weighted Combined Error Rate of 5%"), size = 3) +
ggplot2::labs(x = "Sample Size",
y = "",
color = "",
linetype = "") +
ggplot2::scale_color_manual(values = colors) +
ggplot2::scale_linetype_manual(values = linetypes) +
ggplot2::theme(legend.position="bottom")
plot <- plot +  ggplot2::geom_segment(ggplot2::aes(x = samplesize, xend = samplesize, y = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0), yend = -Inf), color = "red", linetype = "dotted")
print(plot)
options(warn = defaultW)
}
if(printplot){
list(alpha = result$alpha,
beta = result$beta,
errorrate = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0),
objective = result$objective,
samplesize = samplesize,
plot = plot
)
} else {
list(alpha = result$alpha,
beta = result$beta,
errorrate = (costT1T2 * result$alpha + priorH1H0 * result$beta) / (costT1T2 + priorH1H0),
objective = result$objective,
samplesize = samplesize
)
}
}
#' sig.level = x, type = 'two.sample', alternative = 'two.sided')$power")
#' res$alpha
#' res$beta
#' res$errorate
#' @section References:
#' Maier & Lakens (2021). Justify Your Alpha: A Primer on Two Practical Approaches
#' @importFrom stats optimize
#' @import qpdf
#' @export
#'
optimal_alpha <- function(power_function, costT1T2 = 1, priorH1H0 = 1, error = "minimize", verbose = FALSE, printplot = FALSE) {
#Define the function to be minimized
f = function(x, power_function, costT1T2 = 1, priorH1H0 = 1, error = "minimize") {
y <- 1 - eval(parse(text=paste(power_function)))
if(verbose == TRUE){
print(c(x, y, x+y)) #optional: print alpha, beta, and objective
}
if(error == "balance"){
max((costT1T2 * x - priorH1H0 * y)/(priorH1H0 + costT1T2), (priorH1H0 * y - costT1T2 * x)/(priorH1H0 + costT1T2))
} else if (error == "minimize"){
(costT1T2 * x + priorH1H0 * y)/(priorH1H0 + costT1T2)
}
}
#Run optimize to find the minimum
res <- stats::optimize(f,
c(0, 1),
tol = 0.001,
power_function = power_function,
costT1T2 = costT1T2,
priorH1H0 = priorH1H0,
error = error)
if(error == "balance"){
beta <- res$minimum - res$objective
} else if (error == "minimize"){
beta <- res$objective - res$minimum
}
if(printplot){
#Add plot
alpha_level <- 0
alpha_list <- numeric(9999)
beta_list <- numeric(9999)
w_list <- numeric(9999)
w_c_list <- numeric(9999)
for(i in 1:9999) {
alpha_level <- alpha_level + 0.0001
alpha_list[i] <- alpha_level
x <- alpha_level
beta_list[i] <- 1 - eval(parse(text=paste(power_function)))
w_list[i] <- (alpha_level + beta_list[i]) / 2
w_c_list[i] <- (costT1T2 * alpha_level + priorH1H0 * beta_list[i]) / (costT1T2 + priorH1H0)
}
x <- res$minimum
# Create dataframe for plotting
plot_data <- data.frame(alpha_list, beta_list, w_list, w_c_list)
w_c_alpha_plot <- ggplot2::ggplot(ggplot2::aes(x=alpha_list, y=w_c_list), data=plot_data,) +
ggplot2::geom_line(size = 1.3) +
ggplot2::geom_point(ggplot2::aes(x = res$minimum, y = (costT1T2 * res$minimum + priorH1H0 * (1 - eval(parse(text=paste(power_function))))) / (priorH1H0 + costT1T2)), color="red", size = 3) +
ggplot2::theme_minimal(base_size = 18) +
ggplot2::scale_x_continuous("alpha", seq(0,1,0.1)) +
ggplot2::scale_y_continuous("weighted combined error rate", seq(0,1,0.1), limits = c(0,1))
print(w_c_alpha_plot)
}
#Store results
x <- res$minimum
alpha = res$minimum
beta = 1 - eval(parse(text=paste(power_function)))
if(!printplot){
return <- list(alpha = res$minimum,
beta = 1 - eval(parse(text=paste(power_function))),
errorrate = (costT1T2 * alpha + priorH1H0 * beta) / (costT1T2 + priorH1H0),
objective = res$objective)
}
if(printplot){
return <- list(alpha = res$minimum,
beta = 1 - eval(parse(text=paste(power_function))),
errorrate = (costT1T2 * alpha + priorH1H0 * beta) / (costT1T2 + priorH1H0),
objective = res$objective,
plot_data = plot_data,
plot = w_c_alpha_plot)
}
return(return)
}
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power")
devtools::check()
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power",errorgoal = 0.05)
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power",errorgoal = 0.05, costT1T2 = 5)
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power",errorgoal = 0.05, costT1T2 = 5, priorH1H0 = 0.1)
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power",errorgoal = 0.05, costT1T2 = 5, priorH1H0 = 0.1, printplot = T)
res <- optimal_sample(power_function = "pwr::pwr.t.test(d = 0.5, n = sample_n, sig.level = x,
type = 'two.sample', alternative = 'two.sided')$power",errorgoal = 0.05, costT1T2 = 5, priorH1H0 = 1, printplot = T)
devtools::release()
spell_check()
??spell_check()
devtools::spell_check()
devtools::release()
devtools::build()
devtools::check()
devtools::release()
