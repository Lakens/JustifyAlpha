# ensure that frame and cond are factors
dat$frame <- factor(dat$frame)
dat$cond <- factor(dat$cond)
# assign effect codes
contrasts(dat$frame) <- c(-1,1)
contrasts(dat$frame)
contrasts(dat$cond) <- c(-1,1)
contrasts(dat$cond)
# create a new data frame with only data from subject 114
# I'm leaving the "dat" data.frame as is so that I can later
# easily get subsets for other participants
idat <- subset(dat, subject == 114)
mod <- glm(choice ~ frame*cond, data=idat, family=binomial())
summary(mod)
car::Anova(mod, type=3)
confint(mod)
mod$deviance
mod$df.residual
1-pchisq(mod$deviance, mod$df.residual)
exp(pred_lin)/(1+exp(pred_lin))
# load the data
dat <- read.csv("roberts2021framing.csv")
# select only the target trials
dat <- subset(dat, trialType == "target")
# ensure that frame and cond are factors
dat$frame <- factor(dat$frame)
dat$cond <- factor(dat$cond)
# assign effect codes
contrasts(dat$frame) <- c(-1,1)
contrasts(dat$frame)
contrasts(dat$cond) <- c(-1,1)
contrasts(dat$cond)
# create a new data frame with only data from subject 114
# I'm leaving the "dat" data.frame as is so that I can later
# easily get subsets for other participants
idat <- subset(dat, subject == 114)
mod <- glm(choice ~ frame*cond, data=idat, family=binomial())
summary(mod)
car::Anova(mod, type=3)
confint(mod)
mod$deviance
mod$df.residual
1-pchisq(mod$deviance, mod$df.residual)
## Method 1
# get the model parameters
coeff <- coefficients(mod)
# these are:
coeff
pred_lin <- c(sum(c(1,1,1,1)*coeff), # loss, tc
sum(c(1,1,-1,-1)*coeff), # loss, ntc
sum(c(1,-1,1,-1)*coeff), # gain, tc
sum(c(1,-1,-1,1)*coeff)) # gain, ntc
pred_lin
exp(pred_lin)/(1+exp(pred_lin))
newdat <- data.frame(frame=factor(c("gain","gain","loss","loss")),
cond=factor(c("ntc","tc","ntc","tc")))
newdat$pred <- predict(mod, newdata = newdat, type="response")
newdat
summary(residuals(mod, type="pearson"))
hist(residuals(mod, type="pearson"))
bw <- .2
n_obs <- length(residuals(mod, type="pearson"))
library(ggplot2)
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
deviance_test <- function(mod) {
# create a named vector with test results
res <- c("D_r" = mod$deviance, "df" = mod$df.residual, "p" = 1-pchisq(mod$deviance, mod$df.residual))
# cat() is used to print output in the console
cat("Residual Deviance Test\n")
cat(paste0("D[R] = ", prettyNum(res[1]), ", df = ", prettyNum(res[2]), ", p = ", prettyNum(res[3])))
# return the named vector without printing it to the screen by
# enclosing it in invisible()
# this allows you to store the vector in an object, if needed
return(invisible(res))
}
deviance_test(mod)
# load the data
dat <- read.csv("roberts2021framing.csv")
# select only the target trials
dat <- subset(dat, trialType == "target")
# ensure that frame and cond are factors
dat$frame <- factor(dat$frame)
dat$cond <- factor(dat$cond)
# assign effect codes
contrasts(dat$frame) <- c(-1,1)
contrasts(dat$frame)
contrasts(dat$cond) <- c(-1,1)
contrasts(dat$cond)
# create a new data frame with only data from subject 114
# I'm leaving the "dat" data.frame as is so that I can later
# easily get subsets for other participants
idat <- subset(dat, subject == 114)
mod <- glm(choice ~ frame*cond, data=idat, family=binomial())
summary(mod)
car::Anova(mod, type=3)
confint(mod)
mod$deviance
mod$df.residual
1-pchisq(mod$deviance, mod$df.residual)
## Method 1
# get the model parameters
coeff <- coefficients(mod)
# these are:
coeff
pred_lin <- c(sum(c(1,1,1,1)*coeff), # loss, tc
sum(c(1,1,-1,-1)*coeff), # loss, ntc
sum(c(1,-1,1,-1)*coeff), # gain, tc
sum(c(1,-1,-1,1)*coeff)) # gain, ntc
pred_lin
exp(pred_lin)/(1+exp(pred_lin))
newdat <- data.frame(frame=factor(c("gain","gain","loss","loss")),
cond=factor(c("ntc","tc","ntc","tc")))
newdat$pred <- predict(mod, newdata = newdat, type="response")
newdat
summary(residuals(mod, type="pearson"))
hist(residuals(mod, type="pearson"))
bw <- .2
n_obs <- length(residuals(mod, type="pearson"))
library(ggplot2)
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
deviance_test <- function(mod) {
# create a named vector with test results
res <- c("D_r" = mod$deviance, "df" = mod$df.residual, "p" = 1-pchisq(mod$deviance, mod$df.residual))
# cat() is used to print output in the console
cat("Residual Deviance Test\n")
cat(paste0("D[R] = ", prettyNum(res[1]), ", df = ", prettyNum(res[2]), ", p = ", prettyNum(res[3])))
# return the named vector without printing it to the screen by
# enclosing it in invisible()
# this allows you to store the vector in an object, if needed
return(invisible(res))
}
idat <- subset(dat, subject == 116)
mod <- glm(choice ~ frame*cond, data=idat, family=binomial())
# parameter estimates and Wald tests
summary(mod)
# likelihood ratio tests
car::Anova(mod, type=3)
# confidence intervals
confint(mod)
deviance_test(mod)
deviance_test(mod)
# predicted probabilities
idat$pred_p[!is.na(idat$choice)] <- predict(mod, type="response")
aggregate(pred_p ~ frame*cond, data=idat, FUN=mean)
summary(residuals(mod, type="pearson"))
bw <- .2
n_obs <- length(residuals(mod, type="pearson"))
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
deviance_test(mod)
# predicted probabilities
idat$pred_p[!is.na(idat$choice)] <- predict(mod, type="response")
aggregate(pred_p ~ frame*cond, data=idat, FUN=mean)
summary(residuals(mod, type="pearson"))
bw <- 1
n_obs <- length(residuals(mod, type="pearson"))
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
deviance_test(mod)
# predicted probabilities
idat$pred_p[!is.na(idat$choice)] <- predict(mod, type="response")
aggregate(pred_p ~ frame*cond, data=idat, FUN=mean)
summary(residuals(mod, type="pearson"))
bw <- .2
n_obs <- length(residuals(mod, type="pearson"))
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
glmer_mod <- lme4::glmer(choice ~ frame*cond + (frame*cond|subject), family=binomial(), data=dat)
summary(glmer_mod)
glmer_mod2 <- afex::mixed(choice ~ frame*cond + (cond*frame|subject), family=binomial(), data=dat, method="LRT")
glmer_mod2
# get all unique subject IDs
p_IDs <- unique(dat$subject)
# how many participants?
n <- length(p_IDs)
# create matrix to store the estimated coefficients
coef_mat <- matrix(0.0, ncol=4, nrow=n)
# define a for loop, with iterator i = 1, ..., n
for(i in 1:n) {
# get subset of the data for subject i
tdat <- subset(dat, subject == p_IDs[i])
# estimate the model for this subset. this needs
# filling in!
mod <- glm(choice ~ frame*cond, family=binomial(), data=tdat)
# get the coefficients and store them in row i
coef_mat[i,] <- coefficients(mod)
}
head(coef_mat)
tdat <- rbind(data.frame(effect="intercept",value=coef_mat[,1]),
data.frame(effect="frame", value=coef_mat[,2]),
data.frame(effect="cond", value=coef_mat[,3]),
data.frame(effect="frame:cond", value=coef_mat[,4]))
head(tdat)
ggplot(tdat, aes(x=value)) + geom_histogram(binwidth=.1, colour="black") + facet_wrap(~effect)
glmer_coef_mat <- coefficients(glmer_mod)$subject
head(glmer_coef_mat)
tdat2 <- rbind(data.frame(effect="intercept",value=glmer_coef_mat[,1]),
data.frame(effect="frame", value=glmer_coef_mat[,2]),
data.frame(effect="cond", value=glmer_coef_mat[,3]),
data.frame(effect="frame:cond", value=glmer_coef_mat[,4]))
ggplot(tdat2, aes(x=value)) + geom_histogram(binwidth=.1, colour="black") + facet_wrap(~effect)
glmer_coef_mat <- coefficients(glmer_mod)$subject
head(glmer_coef_mat)
tdat2 <- rbind(data.frame(effect="intercept",value=glmer_coef_mat[,1]),
data.frame(effect="frame", value=glmer_coef_mat[,2]),
data.frame(effect="cond", value=glmer_coef_mat[,3]),
data.frame(effect="frame:cond", value=glmer_coef_mat[,4]))
ggplot(tdat2, aes(x=value)) + geom_histogram(binwidth=.1, colour="black") + facet_wrap(~effect)
dat$sureSide <- factor(dat$sureSide)
contrasts(dat$sureSide) <- c(-1,1)
eye_mod <- glm(firstFix == "gamble" ~ frame*cond*sureSide, family=binomial(), data=dat)
summary(eye_mod)
car::Anova(eye_mod, type=3)
eye_glmer_mod2 <- lme4::glmer(firstFix == "gamble" ~ frame*cond*sureSide + (frame + cond + sureSide|subject), family=binomial(), data=dat)
summary(eye_glmer_mod)
dat$sureSide <- factor(dat$sureSide)
contrasts(dat$sureSide) <- c(-1,1)
eye_mod <- glm(firstFix == "gamble" ~ frame*cond*sureSide, family=binomial(), data=dat)
summary(eye_mod)
car::Anova(eye_mod, type=3)
eye_glmer_mod <- lme4::glmer(firstFix == "gamble" ~ frame*cond*sureSide + (frame + cond + sureSide|subject), family=binomial(), data=dat)
summary(eye_glmer_mod)
dat <- read.csv("knapen2018napoleon.csv")
dat <- read.csv("knapen2018napoleon.csv")
hist(dat$DGofferR)
# or use ggplot2
library(ggplot2)
ggplot(dat, aes(x=DGofferR)) + geom_histogram(bins=19, colour="black")
# model estimation
mod <- glm(DGofferR ~ Height, data=dat, family=poisson())
# parameter estimates and Wald tests
summary(mod)
# likelihood ratio tests
car::Anova(mod, type=3)
deviance_test(mod)
summary(residuals(mod, type="pearson"))
hist(residuals(mod, type="pearson"))
bw <- .5
n_obs <- length(residuals(mod, type="pearson"))
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
qmod <- glm(DGofferR ~ Height, data=dat, family=quasipoisson())
summary(qmod)
car::Anova(qmod, type=3, test.statistic="F", error.estimate="dispersion")
car::Anova(mod2, type=3)
library(sdamr) # for center function
# define model
mod2 <- glm(DGofferR ~ center(Height)*center(OpponentHeight), data=dat, family=poisson())
# results
summary(mod2)
car::Anova(mod2, type=3)
car::Anova(mod2, type=3)
# deviance test
deviance_test(mod2)
# Pearson residuals
summary(residuals(mod2, type="pearson"))
bw <- .5
n_obs <- length(residuals(mod, type="pearson"))
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
car::Anova(qmod2, type=3, test.statistic="F", error.estimate="dispersion")
# load the data
dat <- read.csv("roberts2021framing.csv")
# select only the target trials
dat <- subset(dat, trialType == "target")
# ensure that frame and cond are factors
dat$frame <- factor(dat$frame)
dat$cond <- factor(dat$cond)
# assign effect codes
contrasts(dat$frame) <- c(-1,1)
contrasts(dat$frame)
contrasts(dat$cond) <- c(-1,1)
contrasts(dat$cond)
# create a new data frame with only data from subject 114
# I'm leaving the "dat" data.frame as is so that I can later
# easily get subsets for other participants
idat <- subset(dat, subject == 114)
mod <- glm(choice ~ frame*cond, data=idat, family=binomial())
summary(mod)
car::Anova(mod, type=3)
confint(mod)
mod$deviance
mod$df.residual
1-pchisq(mod$deviance, mod$df.residual)
## Method 1
# get the model parameters
coeff <- coefficients(mod)
# these are:
coeff
pred_lin <- c(sum(c(1,1,1,1)*coeff), # loss, tc
sum(c(1,1,-1,-1)*coeff), # loss, ntc
sum(c(1,-1,1,-1)*coeff), # gain, tc
sum(c(1,-1,-1,1)*coeff)) # gain, ntc
pred_lin
exp(pred_lin)/(1+exp(pred_lin))
newdat <- data.frame(frame=factor(c("gain","gain","loss","loss")),
cond=factor(c("ntc","tc","ntc","tc")))
newdat$pred <- predict(mod, newdata = newdat, type="response")
newdat
summary(residuals(mod, type="pearson"))
hist(residuals(mod, type="pearson"))
bw <- .2
n_obs <- length(residuals(mod, type="pearson"))
library(ggplot2)
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
deviance_test <- function(mod) {
# create a named vector with test results
res <- c("D_r" = mod$deviance, "df" = mod$df.residual, "p" = 1-pchisq(mod$deviance, mod$df.residual))
# cat() is used to print output in the console
cat("Residual Deviance Test\n")
cat(paste0("D[R] = ", prettyNum(res[1]), ", df = ", prettyNum(res[2]), ", p = ", prettyNum(res[3])))
# return the named vector without printing it to the screen by
# enclosing it in invisible()
# this allows you to store the vector in an object, if needed
return(invisible(res))
}
idat <- subset(dat, subject == 116)
mod <- glm(choice ~ frame*cond, data=idat, family=binomial())
# parameter estimates and Wald tests
summary(mod)
# likelihood ratio tests
car::Anova(mod, type=3)
# confidence intervals
confint(mod)
deviance_test(mod)
# predicted probabilities
idat$pred_p[!is.na(idat$choice)] <- predict(mod, type="response")
aggregate(pred_p ~ frame*cond, data=idat, FUN=mean)
summary(residuals(mod, type="pearson"))
bw <- .2
n_obs <- length(residuals(mod, type="pearson"))
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
glmer_mod <- lme4::glmer(choice ~ frame*cond + (frame*cond|subject), family=binomial(), data=dat)
# define quasi-poisson distribution
qmod2 <- glm(DGofferR ~ center(Height)*center(OpponentHeight), data=dat, family=quasipoisson())
dat <- read.csv("knapen2018napoleon.csv")
hist(dat$DGofferR)
# or use ggplot2
library(ggplot2)
ggplot(dat, aes(x=DGofferR)) + geom_histogram(bins=19, colour="black")
# model estimation
mod <- glm(DGofferR ~ Height, data=dat, family=poisson())
# parameter estimates and Wald tests
summary(mod)
# likelihood ratio tests
car::Anova(mod, type=3)
deviance_test(mod)
summary(residuals(mod, type="pearson"))
hist(residuals(mod, type="pearson"))
bw <- .5
n_obs <- length(residuals(mod, type="pearson"))
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
qmod <- glm(DGofferR ~ Height, data=dat, family=quasipoisson())
summary(qmod)
car::Anova(qmod, type=3, test.statistic="F", error.estimate="dispersion")
library(sdamr) # for center function
# define model
mod2 <- glm(DGofferR ~ center(Height)*center(OpponentHeight), data=dat, family=poisson())
# results
summary(mod2)
car::Anova(mod2, type=3)
# deviance test
deviance_test(mod2)
# Pearson residuals
summary(residuals(mod2, type="pearson"))
bw <- .5
n_obs <- length(residuals(mod, type="pearson"))
ggplot(data.frame(residual = residuals(mod, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
# define quasi-poisson distribution
qmod2 <- glm(DGofferR ~ center(Height)*center(OpponentHeight), data=dat, family=quasipoisson())
summary(qmod2)
car::Anova(qmod2, type=3, test.statistic="F", error.estimate="dispersion")
dat$pred <- predict(mod2, type="response")
plot(pred ~ Height, data=dat)
mod2_glmer <- lme4::glmer(DGofferR ~ scale(Height)*scale(OpponentHeight) + (1|Dyad), data=dat, family=poisson())
summary(mod2_glmer)
summary(residuals(mod2_glmer, type="pearson"))
summary(residuals(mod2_glmer, type="pearson"))
bw <- .5
n_obs <- length(residuals(mod2_glmer, type="pearson"))
ggplot(data.frame(residual = residuals(mod2_glmer, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
mod3 <- glm(UGofferR ~ center(Height)*center(OpponentHeight), data=dat, family=poisson())
summary(mod3)
car::Anova(mod3, type=3)
deviance_test(mod3)
summary(residuals(mod3, type="pearson"))
bw <- .5
n_obs <- length(residuals(mod3, type="pearson"))
ggplot(data.frame(residual = residuals(mod3, type="pearson")), aes(x=residual)) + geom_histogram(binwidth=bw, colour="black") + stat_function(fun=function(x) dnorm(x) * bw * n_obs, colour="red") + xlab("Standarized Pearson residual") + ylab("Frequency")
?padjust
p.adjust
?p.adjust
p.adjust(c(0.49, 0.001), method = "holm")
library(sdamr)
data("tetris2015")
dat <- tetris2015
# create the two new variables
dat$Reactivation <- ifelse(dat$Condition %in% c("Tetris_Reactivation","Reactivation"), "react","no-react")
dat$Tetris <- ifelse(dat$Condition %in% c("Tetris_Reactivation","Tetris"), "tetris","no-tetris")
# create factors with contrast codes
dat$Reactivation <- as.factor(dat$Reactivation)
contrasts(dat$Reactivation) <- c(-0.5,0.5)
dat$Tetris <- as.factor(dat$Tetris)
# note that I changed the coding from the original exercise!
contrasts(dat$Tetris) <- c(-0.5,0.5)
mod_ancova <- brms::brm(Days_One_to_Seven_Number_of_Intrusions ~ Reactivation*Tetris + Day_Zero_Number_of_Intrusions, data=dat, seed=20221206)
summary(mod_ancova)
plot(mod_ancova)
summary(lm(Days_One_to_Seven_Number_of_Intrusions ~ Reactivation*Tetris + Day_Zero_Number_of_Intrusions, data=dat))
summary(lm(Days_One_to_Seven_Number_of_Intrusions ~ Reactivation*Tetris + Day_Zero_Number_of_Intrusions, data=dat))
brms::mcmc_plot(mod_ancova, type = "hist")
prior_summary(mod_ancova)
brms::prior_summary(mod_ancova)
# load the data (note that you will have to specify a different directory )
dat <- read.csv("roberts2021framing.csv")
# select only the target trials
dat <- subset(dat, trialType == "target")
# ensure that frame and cond are factors
dat$frame <- factor(dat$frame)
dat$cond <- factor(dat$cond)
# assign effect codes
contrasts(dat$frame) <- c(-1,1)
contrasts(dat$cond) <- c(-1,1)
mod_logistic_glmer <- brms::brm(choice ~ frame*cond + (frame*cond|subject), family=bernoulli(), data=dat, seed=123, cores=4)
library(sdamr)
data("tetris2015")
dat <- tetris2015
# create the two new variables
dat$Reactivation <- ifelse(dat$Condition %in% c("Tetris_Reactivation","Reactivation"), "react","no-react")
dat$Tetris <- ifelse(dat$Condition %in% c("Tetris_Reactivation","Tetris"), "tetris","no-tetris")
# create factors with contrast codes
dat$Reactivation <- as.factor(dat$Reactivation)
contrasts(dat$Reactivation) <- c(-0.5,0.5)
dat$Tetris <- as.factor(dat$Tetris)
# note that I changed the coding from the original exercise!
contrasts(dat$Tetris) <- c(-0.5,0.5)
mod_ancova <- brms::brm(Days_One_to_Seven_Number_of_Intrusions ~ Reactivation*Tetris + Day_Zero_Number_of_Intrusions, data=dat, seed=20221206)
summary(mod_ancova)
plot(mod_ancova)
summary(lm(Days_One_to_Seven_Number_of_Intrusions ~ Reactivation*Tetris + Day_Zero_Number_of_Intrusions, data=dat))
brms::mcmc_plot(mod_ancova, type = "hist")
brms::prior_summary(mod_ancova)
# load the data (note that you will have to specify a different directory )
dat <- read.csv("roberts2021framing.csv")
# select only the target trials
dat <- subset(dat, trialType == "target")
# ensure that frame and cond are factors
dat$frame <- factor(dat$frame)
dat$cond <- factor(dat$cond)
# assign effect codes
contrasts(dat$frame) <- c(-1,1)
contrasts(dat$cond) <- c(-1,1)
mod_logistic_glmer <- brms::brm(choice ~ frame*cond + (frame*cond|subject), family=bernoulli(), data=dat, seed=123, cores=4)
# load the data (note that you will have to specify a different directory )
dat <- read.csv("roberts2021framing.csv")
# select only the target trials
dat <- subset(dat, trialType == "target")
# ensure that frame and cond are factors
dat$frame <- factor(dat$frame)
dat$cond <- factor(dat$cond)
# assign effect codes
contrasts(dat$frame) <- c(-1,1)
contrasts(dat$cond) <- c(-1,1)
mod_logistic_glmer <- brms::brm(choice ~ frame*cond + (frame*cond|subject), family=brms::bernoulli(), data=dat, seed=123, cores=4)
mod_logistic_glmer <- brms::brm(choice ~ frame*cond + (1|subject), family=brms::bernoulli(), data=dat, seed=123, cores=4)
summary(mod_logistic_glmer)
curve(dbeta(0.1, 0.1))
curve(dbeta(x, 0.1, 0.1))
curve(dbeta(x, 0.5, 0.5))
curve(dgamma(1,1))
curve(dgamma(x,1,1))
curve(dgamma(x,2,1))
curve(dgamma(x,2,2))
curve(dgamma(x,2,1))
curve(dgamma(x,2,1), ylim = c(0,10))
hist(rgamma(1000, 2,1))
rgamma(2.47, 1.85)
hist(rgamma(1000, 2.47, 1.85))
?rgamma
hist(rgamma(1000, 2.47, 1/1.85))
dat <- rgamma(1000, 2.47, 1/1.85)
sum(dat > 1 & dat < 10)
1/1.85
setwd("C:/github/JustifyAlpha/R")
devtools::build()
install.packages("pkgload")
install.packages("pkgload")
install.packages("pkgload")
install.packages("pkgload")
install.packages("pkgload")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/4.1")
install.packages("rlang")
install.packages("rlang")
setwd("C:/github/JustifyAlpha/R")
install.packages("rlang")
install.packages("rlang")
install.packages("pkload")
devtools::build()
install.packages("pkgload")
devtools::build()
devtools::check()
install.packages(c("stats", "BayesFactor", "ggplot2", "stringr", "shiny", "Superpower", "pwr", "shinydashboard", "qpdf", "knitr", "rmarkdown", "testthat"))
install.packages(c("stats", "BayesFactor", "ggplot2", "stringr", "shiny", "Superpower", "pwr", "shinydashboard", "qpdf", "knitr", "rmarkdown", "testthat"))
install.packages(c("stats", "BayesFactor", "ggplot2", "stringr", "shiny", "Superpower", "pwr", "shinydashboard", "qpdf", "knitr", "rmarkdown", "testthat"))
devtools::build()
devtools::check()
devtools::buld()
devtools::build()
devtools::check()
remove.packages("devtools", lib="~/R/win-library/4.1")
install.packages("devtools")
install.packages("devtools")
devtools::build()
devtools::check()
